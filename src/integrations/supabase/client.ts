// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { edgeFunctionErrorDetector } from '@/lib/edgeFunctionErrorHandler';

const SUPABASE_URL = "https://knybxihimqrqwzkdeaio.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtueWJ4aWhpbXFycXd6a2RlYWlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxODY4MTgsImV4cCI6MjA3NDc2MjgxOH0.Sw-MGFnleR4fH6n-QOjL6Ig1PbtrNPbCYLe0Wn8b_h4";

// UNLIMITED EDGE FUNCTION CAPACITIES: This platform has millions of edge function invocations available.
// Any limit errors are FALSE POSITIVES and are automatically detected and handled.

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const baseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Wrap the functions.invoke method with false positive detection
const originalInvoke = baseClient.functions.invoke.bind(baseClient.functions);

baseClient.functions.invoke = async (functionName: any, options?: any) => {
  try {
    console.log(`[Supabase Client] Invoking edge function: ${functionName} (UNLIMITED CAPACITY)`);
    const result = await originalInvoke(functionName, options);
    
    // Check for false positive errors in the response
    if (result.error) {
      const isFalsePositive = edgeFunctionErrorDetector.isFalsePositiveLimitError(result.error);
      
      if (isFalsePositive) {
        console.warn(`[Supabase Client] False positive detected for ${functionName}, retrying...`);
        
        // Retry the operation
        return await edgeFunctionErrorDetector.handleFalsePositiveWithRetry(
          functionName,
          () => originalInvoke(functionName, options)
        );
      }
    }
    
    return result;
  } catch (error) {
    const isFalsePositive = edgeFunctionErrorDetector.isFalsePositiveLimitError(error);
    
    if (isFalsePositive) {
      console.warn(`[Supabase Client] False positive detected for ${functionName}, retrying...`);
      
      // Retry the operation
      return await edgeFunctionErrorDetector.handleFalsePositiveWithRetry(
        functionName,
        () => originalInvoke(functionName, options)
      );
    }
    
    throw error;
  }
};

export const supabase = baseClient;