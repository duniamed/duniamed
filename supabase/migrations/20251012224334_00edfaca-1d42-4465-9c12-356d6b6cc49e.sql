-- Fix api_keys table to only store hashed keys
-- Remove plain text key column if it exists and ensure we have key_hash
DO $$ 
BEGIN
  -- Check if 'key' column exists and drop it
  IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'key') THEN
    ALTER TABLE api_keys DROP COLUMN key;
  END IF;
  
  -- Add key_hash if it doesn't exist
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'key_hash') THEN
    ALTER TABLE api_keys ADD COLUMN key_hash TEXT NOT NULL;
  END IF;
  
  -- Add key_prefix if it doesn't exist
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'key_prefix') THEN
    ALTER TABLE api_keys ADD COLUMN key_prefix TEXT NOT NULL;
  END IF;
  
  -- Add revoked_at if it doesn't exist
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'revoked_at') THEN
    ALTER TABLE api_keys ADD COLUMN revoked_at TIMESTAMP WITH TIME ZONE;
  END IF;
  
  -- Add revoked_by if it doesn't exist
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'revoked_by') THEN
    ALTER TABLE api_keys ADD COLUMN revoked_by UUID REFERENCES auth.users(id);
  END IF;
  
  -- Add permissions if it doesn't exist
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'api_keys' AND column_name = 'permissions') THEN
    ALTER TABLE api_keys ADD COLUMN permissions JSONB DEFAULT '{}'::jsonb;
  END IF;
END $$;

-- Add index on key_hash for faster lookups
CREATE INDEX IF NOT EXISTS idx_api_keys_key_hash ON api_keys(key_hash);

-- Add comment explaining security
COMMENT ON COLUMN api_keys.key_hash IS 'SHA-256 hash of the API key. Plain text keys are never stored.';
COMMENT ON COLUMN api_keys.key_prefix IS 'First 10 characters of the key for user reference (e.g., dk_abc123...)';

-- Rotate all existing keys (they need to be regenerated by users)
UPDATE api_keys SET status = 'revoked' WHERE status = 'active';